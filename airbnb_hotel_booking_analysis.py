# -*- coding: utf-8 -*-
"""AIRBNB Hotel Booking Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11uuPYZMlLwh6vvggqbENrnZahcdug1kJ

NAME- SOUMYADEEP CHAKRABORTY

INTERNSHIP ID- INTERNSHIP_17546440516895be537820f

APPLY ID- APPLY_175569487368a5c719d1c19

**IMPORTING LIBRARIES**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score

"""**LOAD THE DATASET**


**DATA STATISTICS**
"""

# Load the Excel Dataset
df = pd.read_excel("/content/1730285881-Airbnb_Open_Data.xlsx")

# Basic Information About the Dataset
print("Shape of the dataset:", df.shape)   # number of rows and columns
print("\nColumn names:\n", df.columns.tolist())

print("\n--- Dataset Info ---")
df.info()   # data types, non-null counts

# Check for Missing Values
print("\n--- Missing Values per Column ---")
print(df.isnull().sum())

# Summary Statistics for Numeric Columns
print("\n--- Summary Statistics (Numeric) ---")
print(df.describe())

# Summary Statistics for Categorical Columns
print("\n--- Summary Statistics (Categorical) ---")
print(df.describe(include=['object']))

"""**DATA CLEANING AND PRE-PROCESSING**"""

# Data Cleaning and Preprocessing


# Remove Duplicate Rows
df.drop_duplicates(inplace=True)

# Standardize Column Names (lowercase and replace spaces with underscores)
df.columns = df.columns.str.strip().str.lower().str.replace(' ', '_')

# Clean Text Columns (remove extra spaces, convert to lowercase)
cat_cols = df.select_dtypes(include='object').columns
for col in cat_cols:
    df[col] = df[col].astype(str).str.strip().str.lower()

# Clean Price and Service Fee Columns
# Remove $ and commas, convert to float
for col in ['price', 'service_fee']:
    if col in df.columns:
        # Convert the column to string type before using .str accessor
        df[col] = df[col].astype(str).str.replace(r'[\$,]', '', regex=True)
        df[col] = pd.to_numeric(df[col], errors='coerce')

# Convert Boolean Columns (instant_bookable)
# Check if 'instant_bookable' is in columns before attempting to map
if 'instant_bookable' in df.columns:
    # Convert to string first to handle potential non-string types before mapping
    df['instant_bookable'] = df['instant_bookable'].astype(str).map({'true': True, 'false': False})


# Convert Date Columns (last_review)
if 'last_review' in df.columns:
    df['last_review'] = pd.to_datetime(df['last_review'], errors='coerce')

# Handle Missing Values
# Fill numeric columns with median
num_cols = df.select_dtypes(include=np.number).columns
df[num_cols] = df[num_cols].fillna(df[num_cols].median())

# Fill categorical columns with mode (most frequent value)
for col in cat_cols:
    # Ensure the column is treated as object/string before filling NaN with mode
    if df[col].dtype != 'object':
      df[col] = df[col].astype(str)
    # Check if mode() returns a non-empty Series
    mode_val = df[col].mode()
    if not mode_val.empty:
        df[col] = df[col].fillna(mode_val[0])
    else:
        # Handle case where all values are NaN (e.g., fill with a placeholder or drop)
        # For now, let's fill with a placeholder 'unknown'
        df[col] = df[col].fillna('unknown')


# Remove Invalid Latitude/Longitude (if present)
if 'lat' in df.columns and 'long' in df.columns:
    df = df[(df['lat'].between(-90, 90)) & (df['long'].between(-180, 180))]

# Handle Outliers (Cap extreme values at 99th percentile)
for col in ['price', 'service_fee']:
    if col in df.columns and df[col].dtype in [np.number]:
        upper_limit = df[col].quantile(0.99)
        df = df[df[col] <= upper_limit]

# Final Check â€” Confirm Cleaning Results
print("Data Cleaning Completed!")
print("Shape after cleaning:", df.shape)
print("\nRemaining missing values:\n", df.isnull().sum())
print("\nData Types after cleaning:")
print(df.dtypes)

"""**EXPLORATORY DATA ANALYSIS**"""

# Exploratory Data Analysis (EDA)

import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

sns.set(style="whitegrid", palette="Set2")

# Basic Overview
print("Dataset Shape:", df.shape)
print("\nColumn Names:\n", df.columns.tolist())

print("\nNumeric Summary:")
print(df.describe())

print("\nCategorical Summary:")
print(df.describe(include=['object']))

# Price Distribution
if 'price' in df.columns:
    plt.figure(figsize=(8,4))
    sns.histplot(df['price'], bins=50, kde=True)
    plt.title("Distribution of Airbnb Prices")
    plt.xlabel("Price")
    plt.ylabel("Frequency")
    plt.show()

# Service Fee Distribution
if 'service_fee' in df.columns:
    plt.figure(figsize=(8,4))
    sns.histplot(df['service_fee'], bins=40, kde=True, color='teal')
    plt.title("Distribution of Service Fees")
    plt.xlabel("Service Fee")
    plt.ylabel("Frequency")
    plt.show()

# Listings per Neighbourhood Group
if 'neighbourhood_group' in df.columns:
    plt.figure(figsize=(8,4))
    sns.countplot(x='neighbourhood_group', data=df, order=df['neighbourhood_group'].value_counts().index)
    plt.title("Number of Listings by Neighbourhood Group")
    plt.xlabel("Neighbourhood Group")
    plt.ylabel("Count")
    plt.xticks(rotation=45)
    plt.show()

# Room Type Distribution
if 'room_type' in df.columns:
    plt.figure(figsize=(10,6))
    df['room_type'].value_counts().plot(kind='pie', autopct='%1.1f%%', startangle=90)
    plt.title("Distribution of Room Types")
    plt.ylabel("")
    plt.show()

# Average Price by Room Type
if 'room_type' in df.columns and 'price' in df.columns:
    plt.figure(figsize=(8,5))
    sns.barplot(x='room_type', y='price', data=df, estimator=np.mean, ci=None)
    plt.title("Average Price by Room Type")
    plt.xlabel("Room Type")
    plt.ylabel("Average Price")
    plt.show()

# Price vs Number of Reviews
if {'price', 'number_of_reviews'}.issubset(df.columns):
    plt.figure(figsize=(7,5))
    sns.scatterplot(x='number_of_reviews', y='price', data=df, alpha=0.5)
    plt.title("Price vs Number of Reviews")
    plt.xlabel("Number of Reviews")
    plt.ylabel("Price")
    plt.show()

# Availability Distribution
if 'availability_365' in df.columns:
    plt.figure(figsize=(8,4))
    sns.histplot(df['availability_365'], bins=40, kde=True, color='orange')
    plt.title("Distribution of Yearly Availability")
    plt.xlabel("Days Available")
    plt.ylabel("Count")
    plt.show()

# Host Identity Verification vs Price
if 'host_identity_verified' in df.columns and 'price' in df.columns:
    plt.figure(figsize=(7,5))
    sns.boxplot(x='host_identity_verified', y='price', data=df)
    plt.title("Price by Host Identity Verification Status")
    plt.xlabel("Host Verified")
    plt.ylabel("Price")
    plt.show()

# Correlation Heatmap
plt.figure(figsize=(10,6))
sns.heatmap(df.select_dtypes(include=np.number).corr(), annot=True, cmap="coolwarm", fmt=".2f")
plt.title("Correlation Heatmap")
plt.show()

"""**10 ANALYTICAL QUESTIONS FOR INSIGHTS**

1. What is the average price per neighbourhood group?
"""

if 'neighbourhood_group' in df.columns and 'price' in df.columns:
    avg_price = df.groupby('neighbourhood_group')['price'].mean().sort_values(ascending=False)
    print("Average price by neighbourhood group:\n", avg_price)

    plt.figure(figsize=(8,5))
    sns.barplot(x=avg_price.index, y=avg_price.values)
    plt.title("Average Price by Neighbourhood Group")
    plt.xlabel("Neighbourhood Group")
    plt.ylabel("Average Price")
    plt.show()

"""**Insight**: Certain neighbourhood groups are significantly pricier,
likely due to location and popularity.

2. Which hosts have the most listings?
"""

if 'host_id' in df.columns:
    top_hosts = df['host_id'].value_counts().head(10)
    print("Top 10 hosts by number of listings:\n", top_hosts)

    plt.figure(figsize=(8,5))
    sns.barplot(x=top_hosts.values, y=top_hosts.index)
    plt.title("Top 10 Hosts by Number of Listings")
    plt.xlabel("Number of Listings")
    plt.ylabel("Host ID")
    plt.show()

"""**Insight**: A few hosts manage multiple listings, indicating professional hosting or property management.

3. Which neighbourhoods have the highest average review scores?
"""

if 'neighbourhood' in df.columns and 'review_rate_number' in df.columns:
    top_rated = df.groupby('neighbourhood')['review_rate_number'].mean().sort_values(ascending=False).head(10)
    print("Top 10 highest-rated neighbourhoods:\n", top_rated)

    plt.figure(figsize=(10,5))
    sns.barplot(x=top_rated.values, y=top_rated.index)
    plt.title("Top 10 Neighbourhoods by Average Review Rating")
    plt.xlabel("Average Review Rating")
    plt.ylabel("Neighbourhood")
    plt.show()

"""**Insight**: These areas are well-rated by guests, likely offering good value and experience.

4. What is the relationship between price and number of reviews?
"""

if {'price', 'number_of_reviews'}.issubset(df.columns):
    plt.figure(figsize=(7,5))
    sns.scatterplot(x='number_of_reviews', y='price', data=df, alpha=0.6)
    plt.title("Price vs Number of Reviews")
    plt.xlabel("Number of Reviews")
    plt.ylabel("Price")
    plt.show()

"""**Insight**: Listings with moderate prices often receive more reviews, while very high-priced ones get fewer.

5. Which room type is most popular and most expensive on average?
"""

if 'room_type' in df.columns and 'price' in df.columns:
    room_analysis = df.groupby('room_type')['price'].agg(['count', 'mean']).sort_values(by='mean', ascending=False)
    print("Room type analysis:\n", room_analysis)

    plt.figure(figsize=(8,5))
    sns.barplot(x=room_analysis.index, y=room_analysis['mean'])
    plt.title("Average Price by Room Type")
    plt.xlabel("Room Type")
    plt.ylabel("Average Price")
    plt.show()

"""**Insight**: Entire homes/apartments usually have the highest prices; shared rooms are the cheapest.

6. Which neighbourhoods have the highest number of listings?
"""

if 'neighbourhood' in df.columns:
    top_neigh = df['neighbourhood'].value_counts().head(10)
    print("Top 10 neighbourhoods by listing count:\n", top_neigh)

    plt.figure(figsize=(10,5))
    sns.barplot(x=top_neigh.values, y=top_neigh.index)
    plt.title("Top 10 Neighbourhoods by Number of Listings")
    plt.xlabel("Number of Listings")
    plt.ylabel("Neighbourhood")
    plt.show()

"""**Insight**: These neighbourhoods are the most popular or densely populated with Airbnb listings.

7. How does host verification affect pricing?
"""

if 'host_identity_verified' in df.columns and 'price' in df.columns:
    avg_verified_price = df.groupby('host_identity_verified')['price'].mean()
    print("Average price by host verification status:\n", avg_verified_price)

    plt.figure(figsize=(6,4))
    sns.boxplot(x='host_identity_verified', y='price', data=df)
    plt.title("Host Identity Verification vs Price")
    plt.xlabel("Host Verified")
    plt.ylabel("Price")
    plt.show()

"""**Insight**: Verified hosts often charge higher prices due to increased guest trust.

8. Is there a relationship between availability and price?
"""

if 'availability_365' in df.columns and 'price' in df.columns:
    plt.figure(figsize=(7,5))
    sns.scatterplot(x='availability_365', y='price', data=df, alpha=0.6, color='orange')
    plt.title("Availability (365 days) vs Price")
    plt.xlabel("Availability in Days")
    plt.ylabel("Price")
    plt.show()

"""**Insight**: No clear linear relationship; some high-priced listings may still have high availability.

9. What is the distribution of minimum nights required?
"""

if 'minimum_nights' in df.columns:
    plt.figure(figsize=(8,4))
    sns.histplot(df['minimum_nights'], bins=40, kde=True, color='green')
    plt.title("Distribution of Minimum Nights Required")
    plt.xlabel("Minimum Nights")
    plt.ylabel("Count")
    plt.show()

"""**Insight**: Most listings have a short minimum stay, but a few require long stays (outliers exist).

10. What are the top 10 most expensive listings (name, price, neighbourhood)?
"""

if {'name','neighbourhood','price'}.issubset(df.columns):
    expensive = df[['name','neighbourhood','price']].sort_values(by='price', ascending=False).head(10)
    print("Top 10 most expensive listings:\n", expensive)

    plt.figure(figsize=(10,5))
    sns.barplot(x='price', y='name', data=expensive)
    plt.title("Top 10 Most Expensive Listings")
    plt.xlabel("Price")
    plt.ylabel("Listing Name")
    plt.show()

"""**Insight**: These listings represent premium stays â€” luxury apartments or unique accommodations."""